/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AiAssistant } from "./AiAssistant";
import { AiAssistantCountArgs } from "./AiAssistantCountArgs";
import { AiAssistantFindManyArgs } from "./AiAssistantFindManyArgs";
import { AiAssistantFindUniqueArgs } from "./AiAssistantFindUniqueArgs";
import { DeleteAiAssistantArgs } from "./DeleteAiAssistantArgs";
import { AiAssistantService } from "../aiAssistant.service";
@graphql.Resolver(() => AiAssistant)
export class AiAssistantResolverBase {
  constructor(protected readonly service: AiAssistantService) {}

  async _aiAssistantsMeta(
    @graphql.Args() args: AiAssistantCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AiAssistant])
  async aiAssistants(
    @graphql.Args() args: AiAssistantFindManyArgs
  ): Promise<AiAssistant[]> {
    return this.service.aiAssistants(args);
  }

  @graphql.Query(() => AiAssistant, { nullable: true })
  async aiAssistant(
    @graphql.Args() args: AiAssistantFindUniqueArgs
  ): Promise<AiAssistant | null> {
    const result = await this.service.aiAssistant(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AiAssistant)
  async deleteAiAssistant(
    @graphql.Args() args: DeleteAiAssistantArgs
  ): Promise<AiAssistant | null> {
    try {
      return await this.service.deleteAiAssistant(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
