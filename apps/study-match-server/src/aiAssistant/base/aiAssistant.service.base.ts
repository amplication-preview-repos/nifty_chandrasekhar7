/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AiAssistant as PrismaAiAssistant } from "@prisma/client";

export class AiAssistantServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AiAssistantCountArgs, "select">
  ): Promise<number> {
    return this.prisma.aiAssistant.count(args);
  }

  async aiAssistants(
    args: Prisma.AiAssistantFindManyArgs
  ): Promise<PrismaAiAssistant[]> {
    return this.prisma.aiAssistant.findMany(args);
  }
  async aiAssistant(
    args: Prisma.AiAssistantFindUniqueArgs
  ): Promise<PrismaAiAssistant | null> {
    return this.prisma.aiAssistant.findUnique(args);
  }
  async createAiAssistant(
    args: Prisma.AiAssistantCreateArgs
  ): Promise<PrismaAiAssistant> {
    return this.prisma.aiAssistant.create(args);
  }
  async updateAiAssistant(
    args: Prisma.AiAssistantUpdateArgs
  ): Promise<PrismaAiAssistant> {
    return this.prisma.aiAssistant.update(args);
  }
  async deleteAiAssistant(
    args: Prisma.AiAssistantDeleteArgs
  ): Promise<PrismaAiAssistant> {
    return this.prisma.aiAssistant.delete(args);
  }
}
