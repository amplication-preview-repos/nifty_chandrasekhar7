/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AiAssistantService } from "../aiAssistant.service";
import { AiAssistantCreateInput } from "./AiAssistantCreateInput";
import { AiAssistant } from "./AiAssistant";
import { AiAssistantFindManyArgs } from "./AiAssistantFindManyArgs";
import { AiAssistantWhereUniqueInput } from "./AiAssistantWhereUniqueInput";
import { AiAssistantUpdateInput } from "./AiAssistantUpdateInput";

export class AiAssistantControllerBase {
  constructor(protected readonly service: AiAssistantService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AiAssistant })
  async createAiAssistant(
    @common.Body() data: AiAssistantCreateInput
  ): Promise<AiAssistant> {
    return await this.service.createAiAssistant({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AiAssistant] })
  @ApiNestedQuery(AiAssistantFindManyArgs)
  async aiAssistants(@common.Req() request: Request): Promise<AiAssistant[]> {
    const args = plainToClass(AiAssistantFindManyArgs, request.query);
    return this.service.aiAssistants({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AiAssistant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async aiAssistant(
    @common.Param() params: AiAssistantWhereUniqueInput
  ): Promise<AiAssistant | null> {
    const result = await this.service.aiAssistant({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AiAssistant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAiAssistant(
    @common.Param() params: AiAssistantWhereUniqueInput,
    @common.Body() data: AiAssistantUpdateInput
  ): Promise<AiAssistant | null> {
    try {
      return await this.service.updateAiAssistant({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AiAssistant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAiAssistant(
    @common.Param() params: AiAssistantWhereUniqueInput
  ): Promise<AiAssistant | null> {
    try {
      return await this.service.deleteAiAssistant({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
